假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

解法：这是一个动态规划问题。可以先求出递归表达式。第n阶的方式，就等于第n-1阶 和 第n-2阶的方法之和。
递归表达式为 F(N) = F(N-1) + F(N-2)。如果用递归方法去求解，会产生许多冗余计算，复杂度为2的N次方。
因此，要从第一步算起，第一个只有一种方式，1， 第二步也只有一种方式 1->2。而第三步，可以从1阶跨两格，也可以从2阶跨一格。
如此类推。计算n次即可。

class Solution {
public:
    int climbStairs(int n) {
        if(n==1)
            return 1;

        if(n==2)
            return 2;

        int lastlast = 1;
        int last = 2;
        int thisStep;
        for(int i = 2; i < n; i++)
        {
            thisStep = last+lastlast;
            lastlast = last;
            last = thisStep;
        }

        return thisStep;
    }
};
