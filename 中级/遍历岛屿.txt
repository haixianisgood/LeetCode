给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3

解法：题目是一个广度优先搜索的问题。利用广度优先搜索即可，建立一个同样的bool数组来保存是否搜索过某个点。

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty())
            return 0;

        int row = grid.size();
        int col = grid[0].size();

        vector<vector<bool>> flag;
        vector<bool> temp(col, false);
        for(int i = 0; i < row; i++)
        {
            flag.push_back(temp);
        }

        int count = 0;
        for(int i = 0; i < row; i++)
            for(int j = 0; j < col; j++)
            {
                if(grid[i][j] == '1' && flag[i][j] == false)
                {
                    count++;
                    search(grid, flag, i, j);
                }
            }

        return count;
    }

    void search(vector<vector<char>>& grid, vector<vector<bool>>& flag, int row, int col)
    {
        if(row < 0 || row >= grid.size())
            return;
        else
            if(col < 0 || col >= grid[0].size())
                return;
            else
                if(grid[row][col] == '1' && flag[row][col] == false)
                {
                    flag[row][col] = true;
                    search(grid, flag, row+1, col);
                    search(grid, flag, row-1, col);
                    search(grid, flag, row, col+1);
                    search(grid, flag, row, col-1);
                }
                else
                    return;

    }
};
