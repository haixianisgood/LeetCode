给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。

说明：
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3
进阶：
如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 kthSmallest 函数？

解法：中序遍历二叉树，并从第一个递归返回开始记录遍历节点的个数，根据个数来设定第K小的数。

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        count = 0;
        int num = INT_MAX;
        kthSmallest(root, k, num);
        return num;
    }

    int count;
    void kthSmallest(TreeNode* root, int k, int& num)
    {
        if(root == NULL)
            return;

        kthSmallest(root->left, k, num);
        count++;
        //cout<<count<<" : "<<root->val<<endl;
        if(count == k)
            num = root->val;
        kthSmallest(root->right, k, num);

        return;
    }
};
