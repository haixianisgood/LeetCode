给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:

输入:
    2
   / \
  1   3
输出: true
示例 2:

输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。

解法一：数组法，中序遍历二叉树，若是二叉搜索树，则其得到的是一个有序数组。若不是，则是无序数组，因此判断得到的数组是否有序即可。
解法二：递归法，若一棵树是二叉搜索树，那么它的左子树和右子树也是二叉搜索树，而当前结点的值，会小于于其右子树最左边的值。要用一个全局变量来存储当前结点。

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        /*
        //数组法
        if(root == NULL)
            return true;

        vector<int> v;
        postorderTravelsal(root, v);

        if(v.size() == 1)
            return true;

        for(int i = 1; i < v.size(); i++)
            if(v[i-1] >= v[i])
                return false;

        return true;
        */

        if(!root) return true;
        if(!isValidBST(root -> left))
            return false;
        if(prev && prev -> val >= root -> val)
            return false;
        prev = root;
        if(!isValidBST(root -> right)) return false;
        return true;
    }

    void postorderTravelsal(TreeNode* root, vector<int>& v)
    {
        if(root == NULL)
            return;

        postorderTravelsal(root->left, v);
        v.push_back(root->val);
        postorderTravelsal(root->right, v);

    }

private:
    TreeNode* prev;
};
