你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2:

输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

解法：因为会触动警报，因此要隔一个房屋之后才能再打劫，最多也就隔两个。因为隔三个的话呢，就小于 隔一个，打劫，再隔一个 的这种方式。
起点可以为第一格，也可以为第二格，而第三格一定是由一格过来，而第四格可以由，第一格或第二格过来，第五个即是 二、三。
求其从哪个格过来得到的值比较大即可。因此需要用用一个数组来存储每一格的历史最大值。而结果肯定在最后的两个，比较其大小即可。

class Solution {
public:
    int rob(vector<int>& nums) {

        if(nums.empty())
            return 0;

        if(nums.size() == 1)
            return nums[0];

        if(nums.size() == 2)
            return max(nums[0], nums[1]);

        if(nums.size() == 3)
            return max(nums[0]+nums[2], nums[1]);

        int maxSum = INT_MIN;
        int sum[nums.size()];

        sum[0] = nums[0];
        sum[1] = nums[1];
        sum[2] = nums[0]+nums[2];
        maxSum = sum[2];
        for(int i = 3; i < nums.size(); i++)
        {
            sum[i] = max(sum[i-2]+nums[i], sum[i-3]+nums[i]);
            maxSum = max(maxSum, sum[i]);
        }

        return max(sum[nums.size()-1], sum[nums.size()-2]);
    }
};
